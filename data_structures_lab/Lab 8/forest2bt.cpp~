#include<stdio.h>
#include <stdlib.h>
#define max 10

struct node{
	int data;
	struct node *left;
	struct node *right;
	int nch;
	struct node *child[max];
}*root[max],*r;

struct node* newnode(int d){
	struct node *t=(struct node *)malloc(sizeof(struct node));
	t->data=d;
	t->nch=0;
	for (int i=0;i<max;i++)
		t->child[i]=NULL;
	t->left=NULL;
	t->right=NULL;
	return t;
}

struct node* newtree(struct node *tree){
	int nch,i,ch;
	printf("Enter no of children of %d:",tree->data);
	scanf("%d",&nch);
	tree->nch=nch;
	if (nch==0)	return tree;
	else{
		for (i=0;i<nch;i++){
			printf("Enter child of %d:",tree->data);
			scanf("%d",&ch);
			tree->child[i]=newnode(ch);
		}
		tree->left=tree->child[0];
		struct node *tmp=tree->left,*tmp2=tree;
		for (i=1;i<nch;i++){
			//printf("!!,tpm=%d,tmp2=%d",tmp->data,tmp2->data);	
			tmp->right=tmp2->child[i];
			tmp=tmp->right;
		}
		for (i=0;i<nch;i++){
			tree->child[i]=newtree(tree->child[i]);
		}
	}
	return tree;
}/*void display(struct node *ptr,int i){
	if (ptr!=NULL) {printf("root=%d",ptr->data);
	printf("\n");
	int i,j;
	for (i=0;i<ptr->nch;i++){
		if (ptr->child[i]!=NULL) printf("(%d)",ptr->child[i]->data);
	}
	printf("\n");
	for (i=0;i<ptr->nch;i++){
		struct node *p=ptr->child[i];
		for (j=0;j<p->nch;j++){
			if (p->child[j]!=NULL) printf("(%d)",p->child[j]->data);
		}
	}
 }
}*/

void print(struct node *ptr,int level){
	if (ptr->right!=NULL){
		print(ptr->right,level+1);
		printf("\n");
	}
	if (ptr!=NULL) {
		for (int i=0;i<level;i++)
			printf("   ");
		printf("%d",ptr->data);
	}
	if (ptr->left!=NULL){
		printf("\n");
		print(ptr->left,level+1);
	}
}

int main(){
	int i,n,data;
	printf("NO of trees:");
	scanf("%d",&n);
	for (i=0;i<n;i++){
		printf("Enter root of tree%d:",i+1);
		scanf("%d",&data);
		root[i]=newnode(data);
		root[i]=newtree(root[i]);
		printf("\n");
	}
	/*for (i=0;i<n;i++){
		display(root[i],0);
		printf("\n");
	}*/
	for (i=0;i<n-1;i++){
		root[i]->right=root[i+1];
	}
	printf("\n");
	print(root[0],1);
	printf("\n");
	
}
